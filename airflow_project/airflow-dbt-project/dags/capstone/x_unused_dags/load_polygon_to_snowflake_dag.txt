from airflow.decorators import dag
from airflow import DAG
from airflow.operators.python import PythonOperator
from datetime import datetime, timedelta
import sys
import os
from dags.capstone.python_scripts.load_polygon_into_snowflake import load_polygon_main 


# QUESTIONS:
# APPROACH: Create if not exists --> Delete Today --> Reload Today
    # - What happens if one day it fails? How do I ensure that past days get loaded?
# how to incorporate dbt to my project for submission? Add my sources and all to the dbt project? What happens when pushed to prod?
# How to package the project? How do I add it to my own personal repo?
# How does it get productionized?


default_args = {
    'owner': 'andres',
    'depends_on_past': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
    'email_on_failure': False,
    "start_date": datetime(2024, 11, 1),
    'email_on_retry': False,
    'execution_timeout': timedelta(hours=1),
    'wait_for_downstream':True
}


# Define the DAG.
@dag(
    default_args=default_args,
    description='DAG to load Polygon data into Snowflake using Snowpark',
    schedule_interval="0 1 * * *",
    catchup=True,
    template_searchpath='dags/capstone/python_scripts',
    max_active_runs=3,
)   


    
def load_polygon_to_snowflake_dag():
    load_data_task = PythonOperator(
    task_id='load_data_task',
    python_callable=load_polygon_main,
    depends_on_past=True,
    
    # dag=dag,
    op_kwargs={
        "date_to_ingest": '{{ yesterday_ds }}'
    },
    )

# Set task dependencies if you have more tasks
    load_data_task

load_polygon_to_snowflake_dag()    

