{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.0b3", "generated_at": "2024-12-09T21:06:34.225037Z", "invocation_id": "123950c2-045d-4863-9934-e01b9c65faea", "env": {}}, "results": [{"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-09T21:06:29.054116Z", "completed_at": "2024-12-09T21:06:29.073212Z"}, {"name": "execute", "started_at": "2024-12-09T21:06:29.073665Z", "completed_at": "2024-12-09T21:06:30.272396Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4415428638458252, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b8ec32-0004-4e27-0000-33eb00575376"}, "message": null, "failures": 0, "unique_id": "test.dbt_capstone_andres.not_null_audit_weekly_metrics_week_start_date.51a711f2f6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect week_start_date\nfrom DATAEXPERT_STUDENT.andres.audit_weekly_metrics\nwhere week_start_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-09T21:06:30.498142Z", "completed_at": "2024-12-09T21:06:30.505759Z"}, {"name": "execute", "started_at": "2024-12-09T21:06:30.506245Z", "completed_at": "2024-12-09T21:06:31.289519Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.024704933166504, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b8ec32-0004-4a8b-0000-33eb00573e16"}, "message": null, "failures": 0, "unique_id": "test.dbt_capstone_andres.unique_audit_weekly_metrics_week_start_date.f263844fce", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    week_start_date as unique_field,\n    count(*) as n_records\n\nfrom DATAEXPERT_STUDENT.andres.audit_weekly_metrics\nwhere week_start_date is not null\ngroup by week_start_date\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-12-09T21:06:31.525661Z", "completed_at": "2024-12-09T21:06:31.525666Z"}, {"name": "execute", "started_at": "2024-12-09T21:06:31.526121Z", "completed_at": "2024-12-09T21:06:33.997173Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.696732997894287, "adapter_response": {"_message": "SUCCESS 2", "code": "SUCCESS", "rows_affected": 2, "query_id": "01b8ec32-0004-4e27-0000-33eb00575382"}, "message": null, "failures": 0, "unique_id": "unit_test.dbt_capstone_andres.audit_weekly_metrics.test_amount_sum", "compiled": true, "compiled_code": "with  __dbt__cte__stg_daily_bars as (\n\n-- Fixture for stg_daily_bars\nselect \n    \n        try_cast('2020-11-20' as DATE)\n     as date, \n    \n        try_cast('\\'L\\'' as character varying(16777216))\n     as ticker, \n    \n        try_cast('100' as FLOAT)\n     as number_of_shares_traded, \n    \n        try_cast('10' as NUMBER(38,0))\n     as number_of_trades, try_cast(null as FLOAT) as volume_weighted_avg_price, try_cast(null as FLOAT) as open_price, try_cast(null as FLOAT) as close_price, try_cast(null as FLOAT) as high_price, try_cast(null as FLOAT) as low_price\nunion all\nselect \n    \n        try_cast('2020-11-20' as DATE)\n     as date, \n    \n        try_cast('\\'S\\'' as character varying(16777216))\n     as ticker, \n    \n        try_cast('200' as FLOAT)\n     as number_of_shares_traded, \n    \n        try_cast('20' as NUMBER(38,0))\n     as number_of_trades, try_cast(null as FLOAT) as volume_weighted_avg_price, try_cast(null as FLOAT) as open_price, try_cast(null as FLOAT) as close_price, try_cast(null as FLOAT) as high_price, try_cast(null as FLOAT) as low_price\nunion all\nselect \n    \n        try_cast('2020-11-21' as DATE)\n     as date, \n    \n        try_cast('\\'L\\'' as character varying(16777216))\n     as ticker, \n    \n        try_cast('300' as FLOAT)\n     as number_of_shares_traded, \n    \n        try_cast('40' as NUMBER(38,0))\n     as number_of_trades, try_cast(null as FLOAT) as volume_weighted_avg_price, try_cast(null as FLOAT) as open_price, try_cast(null as FLOAT) as close_price, try_cast(null as FLOAT) as high_price, try_cast(null as FLOAT) as low_price\nunion all\nselect \n    \n        try_cast('2020-11-21' as DATE)\n     as date, \n    \n        try_cast('\\'S\\'' as character varying(16777216))\n     as ticker, \n    \n        try_cast('200' as FLOAT)\n     as number_of_shares_traded, \n    \n        try_cast('50' as NUMBER(38,0))\n     as number_of_trades, try_cast(null as FLOAT) as volume_weighted_avg_price, try_cast(null as FLOAT) as open_price, try_cast(null as FLOAT) as close_price, try_cast(null as FLOAT) as high_price, try_cast(null as FLOAT) as low_price\n),  __dbt__cte__dim_date as (\n\n-- Fixture for dim_date\nselect \n    \n        try_cast('2020-11-20' as DATE)\n     as date_day, try_cast(null as DATE) as prior_date_day, try_cast(null as DATE) as next_date_day, try_cast(null as DATE) as prior_year_date_day, try_cast(null as DATE) as prior_year_over_year_date_day, try_cast(null as NUMBER(3,0)) as day_of_week, try_cast(null as NUMBER(2,0)) as day_of_week_iso, try_cast(null as character varying(16777216)) as day_of_week_name, try_cast(null as character varying(3)) as day_of_week_name_short, try_cast(null as NUMBER(2,0)) as day_of_month, try_cast(null as NUMBER(4,0)) as day_of_year, \n    \n        try_cast(' 2020-11-15' as DATE)\n     as week_start_date, try_cast(null as DATE) as week_end_date, try_cast(null as DATE) as prior_year_week_start_date, try_cast(null as DATE) as prior_year_week_end_date, try_cast(null as NUMBER(38,0)) as week_of_year, try_cast(null as DATE) as iso_week_start_date, try_cast(null as DATE) as iso_week_end_date, try_cast(null as DATE) as prior_year_iso_week_start_date, try_cast(null as DATE) as prior_year_iso_week_end_date, try_cast(null as NUMBER(38,0)) as iso_week_of_year, try_cast(null as NUMBER(38,0)) as prior_year_week_of_year, try_cast(null as NUMBER(38,0)) as prior_year_iso_week_of_year, try_cast(null as NUMBER(38,0)) as month_of_year, try_cast(null as character varying(16777216)) as month_name, try_cast(null as character varying(16777216)) as month_name_short, try_cast(null as DATE) as month_start_date, try_cast(null as DATE) as month_end_date, try_cast(null as DATE) as prior_year_month_start_date, try_cast(null as DATE) as prior_year_month_end_date, try_cast(null as NUMBER(38,0)) as quarter_of_year, try_cast(null as DATE) as quarter_start_date, try_cast(null as DATE) as quarter_end_date, try_cast(null as NUMBER(38,0)) as year_number, try_cast(null as DATE) as year_start_date, try_cast(null as DATE) as year_end_date\nunion all\nselect \n    \n        try_cast('2020-11-21' as DATE)\n     as date_day, try_cast(null as DATE) as prior_date_day, try_cast(null as DATE) as next_date_day, try_cast(null as DATE) as prior_year_date_day, try_cast(null as DATE) as prior_year_over_year_date_day, try_cast(null as NUMBER(3,0)) as day_of_week, try_cast(null as NUMBER(2,0)) as day_of_week_iso, try_cast(null as character varying(16777216)) as day_of_week_name, try_cast(null as character varying(3)) as day_of_week_name_short, try_cast(null as NUMBER(2,0)) as day_of_month, try_cast(null as NUMBER(4,0)) as day_of_year, \n    \n        try_cast(' 2020-11-15' as DATE)\n     as week_start_date, try_cast(null as DATE) as week_end_date, try_cast(null as DATE) as prior_year_week_start_date, try_cast(null as DATE) as prior_year_week_end_date, try_cast(null as NUMBER(38,0)) as week_of_year, try_cast(null as DATE) as iso_week_start_date, try_cast(null as DATE) as iso_week_end_date, try_cast(null as DATE) as prior_year_iso_week_start_date, try_cast(null as DATE) as prior_year_iso_week_end_date, try_cast(null as NUMBER(38,0)) as iso_week_of_year, try_cast(null as NUMBER(38,0)) as prior_year_week_of_year, try_cast(null as NUMBER(38,0)) as prior_year_iso_week_of_year, try_cast(null as NUMBER(38,0)) as month_of_year, try_cast(null as character varying(16777216)) as month_name, try_cast(null as character varying(16777216)) as month_name_short, try_cast(null as DATE) as month_start_date, try_cast(null as DATE) as month_end_date, try_cast(null as DATE) as prior_year_month_start_date, try_cast(null as DATE) as prior_year_month_end_date, try_cast(null as NUMBER(38,0)) as quarter_of_year, try_cast(null as DATE) as quarter_start_date, try_cast(null as DATE) as quarter_end_date, try_cast(null as NUMBER(38,0)) as year_number, try_cast(null as DATE) as year_start_date, try_cast(null as DATE) as year_end_date\n),  __dbt__cte__stg_treasury_revenue_collections as (\n\n-- Fixture for stg_treasury_revenue_collections\nselect \n    \n        try_cast('2020-11-20' as DATE)\n     as collection_date, try_cast(null as character varying(16777216)) as channel_type, \n    \n        try_cast('IRS Tax' as character varying(16777216))\n     as tax_category, \n    \n        try_cast('1000' as NUMBER(19,0))\n     as dollars_collected_by_treasury\nunion all\nselect \n    \n        try_cast('2020-11-20' as DATE)\n     as collection_date, try_cast(null as character varying(16777216)) as channel_type, \n    \n        try_cast('IRS Non Tax' as character varying(16777216))\n     as tax_category, \n    \n        try_cast('2000' as NUMBER(19,0))\n     as dollars_collected_by_treasury\nunion all\nselect \n    \n        try_cast('2020-11-21' as DATE)\n     as collection_date, try_cast(null as character varying(16777216)) as channel_type, \n    \n        try_cast('IRS Tax' as character varying(16777216))\n     as tax_category, \n    \n        try_cast('3000' as NUMBER(19,0))\n     as dollars_collected_by_treasury\nunion all\nselect \n    \n        try_cast('2020-11-21' as DATE)\n     as collection_date, try_cast(null as character varying(16777216)) as channel_type, \n    \n        try_cast('IRS Tax' as character varying(16777216))\n     as tax_category, \n    \n        try_cast('2000' as NUMBER(19,0))\n     as dollars_collected_by_treasury\n), pol as (\nSELECT week_start_date, \nsum(number_of_shares_traded) number_of_shares_traded,\nsum(number_of_trades) number_of_trades\nfrom  __dbt__cte__stg_daily_bars a \nJOIN __dbt__cte__dim_date d on d.date_day=a.date\ngroup by 1)\n\n, rev as (\nselect week_start_date,\nsum(dollars_collected_by_treasury) dollars_collected_by_treasury,\nsum(case when tax_category = 'IRS Tax' then dollars_collected_by_treasury else 0 end) as irs_tax_dollars_collected_by_treasury, \nsum(case when tax_category = 'Non-Tax' then dollars_collected_by_treasury else 0 end) as non_irs_non_tax_dollars_collected_by_treasury,\nsum(case when tax_category = 'IRS Non-Tax' then dollars_collected_by_treasury else 0 end) as irs_non_tax_dollars_collected_by_treasury\nFROM __dbt__cte__stg_treasury_revenue_collections a \nJOIN __dbt__cte__dim_date d on d.date_day=a.collection_date\nGROUP BY ALL)\n\nselect \n    a.week_start_date, \n    a.number_of_shares_traded, \n    a.number_of_trades,\n    b.dollars_collected_by_treasury,\n    b.irs_tax_dollars_collected_by_treasury\n\nfrom pol a \nINNER JOIN rev b on b.week_start_date = a.week_start_date", "relation_name": null, "batch_results": null}], "elapsed_time": 6.445847988128662, "args": {"source_freshness_run_project_hooks": false, "quiet": false, "state_modified_compare_vars": false, "log_format_file": "debug", "defer": false, "vars": {}, "use_colors": true, "partial_parse_file_diff": true, "state_modified_compare_more_unrendered_values": false, "macro_debugging": false, "version_check": true, "exclude": [], "populate_cache": true, "partial_parse": true, "cache_selected_only": false, "exclude_resource_types": [], "use_colors_file": true, "warn_error_options": {"include": [], "exclude": []}, "write_json": true, "strict_mode": false, "project_dir": ".", "which": "test", "send_anonymous_usage_stats": true, "profiles_dir": ".", "favor_state": false, "indirect_selection": "eager", "introspect": true, "printer_width": 80, "show_resource_report": false, "log_level_file": "debug", "select": [], "invocation_command": "dbt test", "log_level": "info", "log_path": "logs", "print": true, "resource_types": [], "require_explicit_package_overrides_for_builtin_materializations": true, "log_format": "default", "static_parser": true, "skip_nodes_if_on_run_start_fails": false, "require_resource_names_without_spaces": false, "log_file_max_bytes": 10485760}}